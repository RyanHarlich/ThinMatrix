package engineTester;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import org.lwjgl.opengl.Display;
import org.lwjgl.opengl.GL11;
import org.lwjgl.opengl.GL30;
import org.lwjgl.util.vector.Vector2f;
import org.lwjgl.util.vector.Vector3f;
import org.lwjgl.util.vector.Vector4f;

import entities.Camera;
import entities.Entity;
import entities.Light;
import entities.Player;
import guis.GuiRenderer;
import guis.GuiTexture;
import models.TexturedModel;
import normalMappingObjConverter.NormalMappedObjLoader;
import renderEngine.DisplayManager;
import renderEngine.Loader;
import renderEngine.MasterRenderer;
import renderEngine.OBJLoader;
import terrains.Terrain;
import textures.ModelTexture;
import textures.TerrainTexture;
import textures.TerrainTexturePack;
import toolbox.MousePicker;
import water.WaterFrameBuffers;
import water.WaterRenderer;
import water.WaterShader;
import water.WaterTile;

public class MainGameLoop {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		// OpenGL expects vertices to be defined counter clockwise by default


		
		
		
		
		DisplayManager.createDisplay();	
		Loader loader = new Loader();
		
		
		//********** TERRAIN TEXTURE STUFF *******************
		
		TerrainTexture backgroundTexture = new TerrainTexture(loader.loadTexture("grassy2"));
		TerrainTexture rTexture = new TerrainTexture(loader.loadTexture("mud"));
		TerrainTexture gTexture = new TerrainTexture(loader.loadTexture("grassFlowers"));
		TerrainTexture bTexture = new TerrainTexture(loader.loadTexture("path"));
		
		TerrainTexturePack texturePack = new TerrainTexturePack(backgroundTexture, rTexture, gTexture, bTexture);
		TerrainTexture blendMap = new TerrainTexture(loader.loadTexture("blendMap"));
		
		//****************************************************
			
		
		/* Player */
		TexturedModel playerModel = new TexturedModel(OBJLoader.loadObjModel("person", loader), new ModelTexture(loader.loadTexture("playerTexture")));
		ModelTexture playerTexture = playerModel.getTexture();
		playerTexture.setShineDamper(100);
		playerTexture.setReflectivity(10);
		
		/* Tree */
		TexturedModel treeModel = new TexturedModel(OBJLoader.loadObjModel("tree", loader), new ModelTexture(loader.loadTexture("tree")));
		
		/* Low Poly Tree */
		TexturedModel lowPolyTreeModel = new TexturedModel(OBJLoader.loadObjModel("lowPolyTree", loader), new ModelTexture(loader.loadTexture("lowPolyTree")));
		
		/* Grass */
		//TexturedModel grassModel = new TexturedModel(OBJLoader.loadObjModel("grassModel", loader), new ModelTexture(loader.loadTexture("grassTexture")));
		//grassModel.getTexture().setHasTransparency(true);
		//grassModel.getTexture().setUseFakeLighting(true);
		
		/* Flower */
		//TexturedModel flowerModel = new TexturedModel(OBJLoader.loadObjModel("grassModel", loader), new ModelTexture(loader.loadTexture("flowerTexture")));
		//flowerModel.getTexture().setHasTransparency(true);
		//flowerModel.getTexture().setUseFakeLighting(true);
		
		/* BobbleTree */
		
		/* Bunny */
		
		/* Dragon */
		
		/* Stall */
		
		/* Toon Rocks */
		
		/* Barrel */
		TexturedModel barrelModel = new TexturedModel(NormalMappedObjLoader.loadOBJ("barrel", loader), new ModelTexture(loader.loadTexture("barrel")));
		barrelModel.getTexture().setShineDamper(10);
		barrelModel.getTexture().setReflectivity(0.5f);
		
		/* Boulder */
		
		/* Crate */
		
		/* Fern */
		ModelTexture fernTextureAtlas = new ModelTexture(loader.loadTexture("fernTextureAtlases"));
		fernTextureAtlas.setNumberOfRows(2);
		TexturedModel fernModel = new TexturedModel(OBJLoader.loadObjModel("fern", loader), fernTextureAtlas);
		fernModel.getTexture().setHasTransparency(true);
		
		/* Box */
		TexturedModel boxModel = new TexturedModel(OBJLoader.loadObjModel("box", loader), new ModelTexture(loader.loadTexture("box")));

		/* Lamp */
		TexturedModel lampModel = new TexturedModel(OBJLoader.loadObjModel("lamp", loader), new ModelTexture(loader.loadTexture("lamp")));

		
		
		
		/* Terrains */
		List<Terrain> terrains = new ArrayList<Terrain>();
		Terrain terrain = new Terrain(0, -1, loader, texturePack, blendMap, "heightmap"); 	// darker the spot the lower the spot
		terrains.add(terrain);
		//Terrain terrain2 = new Terrain(-1,-1, loader, texturePack, blendMap, "heightmap");
		
		

		
		/* Create entities */
		Random random = new Random();
		List<Entity> entities = new ArrayList<Entity>();
		List<Entity> normalMapEntities = new ArrayList<Entity>();
		for (int i = 0; i < 400; ++i) {
			if (i % 2 == 0) {
				float x = random.nextFloat() * 800 - 400;
				float z = random.nextFloat() * -600;
				float y = terrain.getHeightOfTerrain(x, z);
				entities.add(new Entity(fernModel, random.nextInt(4), new Vector3f(x, y, z), 0, 
						random.nextFloat() * 360, 0, 0.9f));

			}
			if (i % 5 == 0) {
				float x = random.nextFloat() * 800 - 400;
				float z = random.nextFloat() * -600;
				float y = terrain.getHeightOfTerrain(x, z);
				entities.add(new Entity(lowPolyTreeModel, new Vector3f(x, y, z), 0, random.nextFloat() * 360, 0, random.nextFloat() * 0.1f + 0.6f));
				x = random.nextFloat() * 800 - 400;
				z = random.nextFloat() * -600;
				y = terrain.getHeightOfTerrain(x, z);
				entities.add(new Entity(treeModel, new Vector3f(x, y, z), 0, 0, 0, random.nextFloat() * 1 + 4));
			}
		}
		/* Boxes */
		entities.add(new Entity(boxModel, new Vector3f(100, 5, 
				-10), 0, 0, 0, 5f));
		entities.add(new Entity(boxModel, new Vector3f(100, 5, 
				-100), 0, 0, 0, 5f));
		normalMapEntities.add(new Entity(barrelModel, new Vector3f(75, 10, -75), 0, 0, 0, 1.0f));
		
		
		/* Lamp lights */
		Entity lampEntity = new Entity(lampModel, new Vector3f(185, -4.7f, -293), 0, 0, 0, 1);
		entities.add(lampEntity);
		entities.add(new Entity(lampModel, new Vector3f(370, 4.2f, -300), 0, 0, 0, 1));
		entities.add(new Entity(lampModel, new Vector3f(293, -6.8f, -305), 0, 0, 0, 1));
		
		
		
		/* Light */	
		List<Light> lights = new ArrayList<Light>();
		// night
		//Light sun = new Light(new Vector3f(0, 10000, -7000), new Vector3f(0.4f, 0.4f, 0.4f)); // light source // light color
		// day
		Light sun = new Light(new Vector3f(0, 10000, -7000), new Vector3f(1.6f, 1.6f, 1.6f));
		lights.add(sun);
		Light light = new Light(new Vector3f(185, 10, -293), new Vector3f(2, 0, 0), new Vector3f(1, 0.01f, 0.002f));
		lights.add(light); // light source // light color // attenuation
		lights.add(new Light(new Vector3f(370, 15, -295), new Vector3f(0, 2, 2), new Vector3f(1, 0.01f, 0.002f)));
		lights.add(new Light(new Vector3f(293, 7, -305), new Vector3f(2, 2, 0), new Vector3f(1, 0.01f, 0.002f)));
		

		

		
		
		/* Player */
		Player player = new Player(playerModel, new Vector3f(100, 0, -50), 0, 180, 0, 0.6f);
		entities.add(player);
		
		/* Camera */
		Camera camera = new Camera(player);
		
		
		
		/* GUI */
		List<GuiTexture> guiTextures = new ArrayList<GuiTexture>();
		GuiTexture gui = new GuiTexture(loader.loadTexture("socuwan"), new Vector2f(0.5f, 0.5f), new Vector2f(0.25f, 0.25f));
		guiTextures.add(gui);
		GuiRenderer guiRenderer = new GuiRenderer(loader);
		
		
		/* Master Renderer */
		MasterRenderer renderer = new MasterRenderer(loader);
		
		
		/* Mouse Picker */
		MousePicker picker = new MousePicker(camera, renderer.getProjectionMatrix(), terrain);
		
		
		

		
		//************************* Water Renderer Set-up **********************
		
		WaterFrameBuffers fbos = new WaterFrameBuffers();
		
		WaterShader waterShader = new WaterShader();
		WaterRenderer waterRenderer = new WaterRenderer(loader, waterShader, renderer.getProjectionMatrix(), fbos);
		List<WaterTile> waters = new ArrayList<WaterTile>();
		WaterTile water = new WaterTile(75, -75, 0);
		waters.add(water);
		

		/* Small mini view window */
		//GuiTexture miniView = new GuiTexture(fbos.getReflectionTexture(), new Vector2f(-0.65f, 0.65f), new Vector2f(0.30f, 0.30f));
		//guiTextures.add(miniView);
		//GuiTexture refraction = new GuiTexture(fbos.getRefractionTexture(), new Vector2f(0.5f, 0.5f), new Vector2f(0.25f, 0.25f));
		//GuiTexture reflection = new GuiTexture(fbos.getReflectionTexture(), new Vector2f(-0.5f, 0.5f), new Vector2f(0.25f, 0.25f));
		//guiTextures.add(refraction);
		//guiTextures.add(reflection);
		
		//************************* MAIN GAME LOOP *****************************
		
		while(!Display.isCloseRequested()) {
			player.move(terrain);
			camera.move();			
			mousePickerTutorial(picker, lampEntity, light);// update after camera has moved

			GL11.glEnable(GL30.GL_CLIP_DISTANCE0);
			
			// Frame Buffer Object on a GUI
			//fbos.bindReflectionFrameBuffer();
			//renderer.renderScene(entities, terrains, lights, camera, new Vector4f(0, -1, 0, 15));
			//fbos.unbindCurrentFrameBuffer();
			
			// render reflection texture
			fbos.bindReflectionFrameBuffer();
			float distance = 2 * (camera.getPosition().y - water.getHeight());
			camera.getPosition().y -= distance;
			camera.invertPitch();
			renderer.renderScene(entities, normalMapEntities, terrains, lights, camera, new Vector4f(0, 1, 0, -water.getHeight() + 1.0f)); // render everything above the water // the add + 1.0f to rid of lines on edges of water in soft edge tutorial
			camera.getPosition().y += distance;
			camera.invertPitch();
			
			// render refraction texture
			fbos.bindRefractionFrameBuffer();
			renderer.renderScene(entities, normalMapEntities, terrains, lights, camera, new Vector4f(0, -1, 0, water.getHeight() + 1.0f)); // render everything under the water // the add + 1.0f to rid of lines on edges of water in soft edge tutorial 
			
			// render to screen
			GL11.glDisable(GL30.GL_CLIP_DISTANCE0);
			fbos.unbindCurrentFrameBuffer();
			renderer.renderScene(entities, normalMapEntities, terrains, lights, camera, new Vector4f(0, 0, 0, 0));
			waterRenderer.render(waters, camera, sun);
			guiRenderer.render(guiTextures);
			DisplayManager.updateDisplay();
		}
		
		//***************************** Clean Up *********************************
		
		fbos.cleanUp();
		waterShader.cleanUp();
		guiRenderer.cleanUp();
		renderer.cleanUp();
		loader.cleanUp();
		DisplayManager.closeDisplay();
	}
	
	public static void mousePickerTutorial(MousePicker picker, Entity lampEntity, Light light) {
		// Mouse picker
		picker.update(); // update after camera has moved
		System.out.println(picker.getCurrentRay());
		Vector3f terrainPoint = picker.getCurrentTerrainPoint();
		if (terrainPoint != null) {
			lampEntity.setPosition(terrainPoint);
			light.setPosition(new Vector3f(terrainPoint.x,terrainPoint.y+13,terrainPoint.z+5));
		}
	}

}
