#version 400 core

in vec4 clipSpace;
in vec2 textureCoords;
in vec3 toCameraVector;

out vec4 out_Color;

uniform sampler2D reflectionTexture; // above water
uniform sampler2D refractionTexture; // under water
uniform sampler2D dudvMap;

uniform float moveFactor;

const float waveStrength = 0.02f;

void main(void) {

	/* Projective Texture Mapping & Clipping Clipping Planes */
	vec2 ndc = (clipSpace.xy/clipSpace.w) / 2.0f + 0.5f; //normalizedDeviceCoordinates
	vec2 refractTexCoords = vec2(ndc.x, ndc.y);
	vec2 reflectTexCoords = vec2(ndc.x, -ndc.y);
	
	/* DuDv maps */
	vec2 distortion1 = (texture(dudvMap, vec2(textureCoords.x + moveFactor, textureCoords.y)).rg * 2.0 - 1.0) * waveStrength; // only care about the red green components
	vec2 distortion2 = (texture(dudvMap, vec2(-textureCoords.x + moveFactor, textureCoords.y + moveFactor)).rg * 2.0 - 1.0) * waveStrength; // only care about the red green components
	vec2 totalDistortion = distortion1 + distortion2;	
	refractTexCoords += totalDistortion;
	refractTexCoords = clamp(refractTexCoords, 0.001f, 0.999f);
	reflectTexCoords += totalDistortion;
	refractTexCoords.x = clamp(refractTexCoords.x, 0.001f, 0.999f);
	refractTexCoords.y = clamp(refractTexCoords.y, -0.999f, -0.001f);
	
	/* Projective Texture Mapping & Clipping Clipping Planes */
	vec4 reflectColor = texture(reflectionTexture, reflectTexCoords);
	vec4 refractColor = texture(refractionTexture, refractTexCoords);
	
	/* Fresnel Effect */
	vec3 viewVector = normalize(toCameraVector);
	float refractiveFactor = dot(viewVector, vec3(0.0, 1.0, 0.0)); // the distance between vectors camera and pointing straight up
	

	out_Color = mix(reflectColor, refractColor, refractiveFactor); // mix gradient of fresnel effect
	out_Color = mix(out_Color, vec4(0.0f, 0.3f, 0.5f, 1.0f), 0.2); // mix a tint of bluish green to the water

}